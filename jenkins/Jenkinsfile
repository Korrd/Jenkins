node {

  timeout(BUILD_TIMEOUT.toInteger()) {
    try {

      checkout scm

      stage("variables setup") {

        env.IMAGE_TAG = "korrd2/jenkins"
        env.REPO = "Jenkins"

        withCredentials([usernamePassword(credentialsId: 'DOCKER', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
          sh 'docker login -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD'
        }
      }

      stage("build") {
        sh 'docker build --pull -t $IMAGE_TAG:$BUILD_NUMBER .'
      }

      stage("push") {

        if (env.BRANCH_NAME == "master") {
          sh 'docker tag $IMAGE_TAG:$BUILD_NUMBER $IMAGE_TAG:lts'
          sh 'docker push $IMAGE_TAG:lts'
        } else {

          def SANITIZED_BRANCH_NAME = "${sanitizedBranchName(BRANCH_NAME)}"

          sh 'docker tag $IMAGE_TAG:$BUILD_NUMBER $IMAGE_TAG:$SANITIZED_BRANCH_NAME'
          sh 'docker push $IMAGE_TAG:$SANITIZED_BRANCH_NAME'
        }

      }

      slackSend color: 'good', message: "Branch `$BRANCH_NAME` from repo `$REPO` has built successfully"

    } catch (err) {

      sh "echo $err"
      currentBuild.result = 'FAILURE'

      slackSend color: 'bad', message: "*$currentBuild.result*: Branch `$BRANCH_NAME` from repo `$REPO` has failed to build \n - *Link* \n ${BUILD_URL}console \n - *Error Message* ```$err```"

    } finally {

      /* Clean up workspace */
      deleteDir()

    }
  }
}

def sanitizedBranchName(branchName) {
  // Remove the verb from the branch (add/...)
  // and replace all dots with dashes
  "${branchName.split('/')[1].replaceAll('\\.', '-')}"
}
